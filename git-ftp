#!/bin/bash
#
# Copyright(c) 2010 Ren√© Moser
# http://github.com/resmo/git-ftp
#
# Git-ftp is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Git-ftp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Git-ftp.  If not, see <http://www.gnu.org/licenses/>.

# ------------------------------------------------------------
# Setup Environment
# ------------------------------------------------------------

# General config
DEFAULT_PROTOCOL="ftp"
DEPLOYED_SHA1_FILE=".git-ftp.log"
LCK_FILE=".git/$(basename $0).lck"
REMOTE_LCK_FILE="$(basename $0).lck"
SYSTEM=$(uname)

# ------------------------------------------------------------
# Defaults
# ------------------------------------------------------------
URL=""
REMOTE_PROTOCOL=""
REMOTE_HOST=""
REMOTE_USER=""
REMOTE_PASSWD=""
REMOTE_PATH=""
REMOTE_DELETE_CMD="-DELE "
REMOTE_CMD_OPTIONS="-s"
VERBOSE=0
IGNORE_DEPLOYED=0
DRY_RUN=0
FORCE=0
ACTION=""
ENABLE_REMOTE_LCK=0
LOG_CACHE=""
SCOPE=""
ACTIVE_MODE=0
USE_KEYCHAIN=0
KEYCHAIN_USER=""
KEYCHAIN_HOST=""
VERSION='0.3.1'

# ------------------------------------------------------------
# Exit Error Codes
# ------------------------------------------------------------
ERROR_USAGE=2
ERROR_MISSING_ARGUMENTS=3
ERROR_UPLOAD=4
ERROR_DOWNLOAD=5
ERROR_UNKNOWN_PROTOCOL=6
ERROR_REMOTE_LOCKED=7
ERROR_GIT=8

# ------------------------------------------------------------
# Functions
# ------------------------------------------------------------

usage_long()
{
less << EOF
USAGE
	git-ftp <action> [<options>] <url>


DESCRIPTION
	git-ftp does FTP the GIT way.

	It uses GIT to find out which files are different of the uploaded files
	and let you save time and bandwith by uploading only those files.

	It remembers the deployed state by uploading the SHA1 in a log file.


ACTIONS
	. init
		Initialize the first upload to remote host.

	. push
		Uploads git tracked files which have changed since last upload.

	. show
		Gets last uploaded SHA1 from log and hooks git show.

	. catchup
		Uploads the current SHA1 to the log, does not upload any files.

		This is useful if you used another FTP client to upload the
		files and now want to remember the SHA1.
	. help
		Shows this help


URL
	. FTP (default)	host.example.com[:<port>][/<remote path>]
	. FTP		ftp://host.example.com[:<port>][/<remote path>]
	. SFTP		sftp://host.example.com[:<port>][/<remote path>]
	. FTPS		ftps://host.example.com[:<port>][/<remote path>]
	. FTPES		ftpes://host.example.com[:<port>][/<remote path>]


OPTIONS
	-h, --help	Show this help
	-u, --user	FTP login name
	-p, --passwd	FTP password
	-k, --keychain  FTP password from KeyChain (Mac OS X only)
	-s, --scope	Using a scope (e.g. dev, production, testing, foobar) 
	-D, --dry-run	Dry run: Does not upload anything
	-a, --all	Uploads all files, ignores deployed SHA1 hash
	-A, --active    Use FTP active mode
	-l, --lock	Enable/Disable remote locking
	-f, --force	Force, does not ask questions
	-n, --silent	Silent
	-v, --verbose	Verbose
	--version	Prints version


EXAMPLES
	. git-ftp push -u john ftp://ftp.example.com:4445/public_ftp -p -v
	. git-ftp push -p -u john -v ftp.example.com:4445:/public_ftp
	. git-ftp push --scope production


SET DEFAULTS
	. git config git-ftp.user john
	. git config git-ftp.url ftp.example.com
	. git config git-ftp.password secr3t


SET SCOPE DEFAULTS 
	e.g. your scope is 'testing'
	. git config git-ftp.testing.url ftp.example.local


VERSION
	$VERSION
EOF
exit 0
}

usage() {
	echo "git-ftp <action> [<options>] <url>"
	exit $ERROR_USAGE
}

ask_for_passwd() {
	echo -n "Password: "
	stty -echo > /dev/null 2>&1
	read REMOTE_PASSWD
	stty echo > /dev/null 2>&1
	echo ""
}

get_keychain_password () {
	if [ "$SYSTEM" = "Darwin" ]; then
		# Split user and host if necessary
		if [ $(echo "$KEYCHAIN_USER" | grep '@') ]; then
			KEYCHAIN_HOST=$(echo "$KEYCHAIN_USER" | cut -d '@' -f2)
			KEYCHAIN_USER=$(echo "$KEYCHAIN_USER" | cut -d '@' -f1)
		else
			[ -z $KEYCHAIN_USER ] && KEYCHAIN_USER=$REMOTE_USER
			[ -z $KEYCHAIN_HOST ] && KEYCHAIN_HOST=$REMOTE_HOST
		fi

		[ -z $KEYCHAIN_USER ] && print_error_and_die "Missing keychain account" $ERROR_MISSING_ARGUMENTS
		args=(-a "$KEYCHAIN_USER")
		[ -n "$KEYCHAIN_HOST" ] && args+=(-s "$KEYCHAIN_HOST")

		if pass="$(security find-internet-password ${args[@]} -g 2>&1 > /dev/null)"; then
			without_prefix="${pass#password: \"}"
			REMOTE_PASSWD="${without_prefix%\"}"
		else
			print_error_and_die "Password not found in keychain for account '$KEYCHAIN_USER @ $KEYCHAIN_HOST'." $ERROR_MISSING_ARGUMENTS
		fi
	else
		write_log "Ingoring -k on non-Darwin systems"
	fi
}

# Checks if last comand was successful
check_exit_status() {
	if [ $? -ne 0 ]; then
		print_error_and_die "$1, exiting..." $2
	fi
}

# Simple log func
write_log() {
	if [ $VERBOSE -eq 1 ]; then
		echo "$(date): $1"
	else
		if [ -n "$LOG_CACHE" ]; then
			LOG_CACHE="$LOG_CACHE\n$(date): $1"
		else
			LOG_CACHE="$(date): $1"
		fi
	fi
}

# Simple error printer
print_error_and_die() {
	if [ $VERBOSE -eq 0 ]; then
		echo "fatal: $1"
	else
		write_log "fatal: $1"
	fi
	release_lock
	exit $2
}

# Simple info printer
print_info() {
	if [ $VERBOSE -eq 0 ]; then
		echo "$1"
	else
		write_log "$1"
	fi
}

set_default_curl_options() {
	args=($REMOTE_CMD_OPTIONS)
	if [ ! -z $REMOTE_USER ]; then
		args+=(--user "$REMOTE_USER":"$REMOTE_PASSWD")
	else
		args+=(--netrc)
	fi
	args+=(-#)
	if [ $ACTIVE_MODE -eq 1 ]; then
		args+=(-P "-")
	fi
}

upload_file() {
	SRC_FILE="$1"
	DEST_FILE="$2"
	if [ -z $DEST_FILE ]; then
		DEST_FILE=$SRC_FILE
	fi
	set_default_curl_options
	args+=(-T "$SRC_FILE")
	args+=(--ftp-create-dirs)
	args+=("$REMOTE_PROTOCOL://$REMOTE_HOST/${REMOTE_PATH}${DEST_FILE}")
	curl "${args[@]}"
	check_exit_status "Could not upload" $ERROR_UPLOAD
}

remove_file() {
	FILENAME="$1"
	set_default_curl_options
	args+=(-Q "${REMOTE_DELETE_CMD}${REMOTE_PATH}${FILENAME}")
	args+=("$REMOTE_PROTOCOL://$REMOTE_HOST")
	if [ "$REMOTE_CMD_OPTIONS" = "-v" ]; then
		curl "${args[@]}"
	else
		curl "${args[@]}" > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			write_log "Could not delete ${REMOTE_PATH}${FILENAME}, continuing..."
		fi
	fi
}

get_file_content() {
	SRC_FILE="$1"
	set_default_curl_options
	args+=("$REMOTE_PROTOCOL://$REMOTE_HOST/${REMOTE_PATH}${SRC_FILE}")
	curl "${args[@]}"
}

upload_local_sha1() {
	DEPLOYED_SHA1=$(git log -n 1 --pretty=format:%H)
	write_log "Uploading commit log to $REMOTE_PROTOCOL://$REMOTE_HOST/${REMOTE_PATH}$DEPLOYED_SHA1_FILE"
	if [ $DRY_RUN -ne 1 ]; then
		echo "$DEPLOYED_SHA1" | upload_file - $DEPLOYED_SHA1_FILE
		check_exit_status "Could not upload" $ERROR_UPLOAD
	fi
	print_info "Last deployment changed to $DEPLOYED_SHA1";
}

remote_lock() {
	[ $ENABLE_REMOTE_LCK -ne 1 ] && return
	[ $FORCE -ne 1 ] && check_remote_lock

	LOCAL_HOSTNAME="$(hostname --fqdn)"
	DATE_UTC="$(date --utc --rfc-2822)"
	LCK_MESSAGE="${USER}@${LOCAL_HOSTNAME} on $DATE_UTC"

	LOCAL_SHA1="$(git log -n 1 --pretty=format:%H)"
	write_log "Remote locking $LCK_MESSAGE"
	if [ $DRY_RUN -ne 1 ]; then
		echo "${LOCAL_SHA1}\n${LCK_MESSAGE}" | upload_file - $REMOTE_LCK_FILE
		check_exit_status "Could not upload remote lock file" $ERROR_UPLOAD
	fi
}

release_remote_lock() {
	[ $ENABLE_REMOTE_LCK != 1 ] && return;
	write_log "Releasing remote lock"
	remove_file $REMOTE_LCK_FILE
}

lock() {
	if [ $(uname | grep 'MINGW') ]; then
		write_log "Ingnoring lock on MinGW"
		return
	fi
	# Checks locking, make sure this only run once a time
	if [ -f "$LCK_FILE" ]; then

		# The file exists so read the PID to see if it is still running
		MYPID=$(head -n 1 "$LCK_FILE")

		TEST_RUNNING=$(ps -p $MYPID | grep $MYPID)

		if [ -z "$TEST_RUNNING" ]; then
			# The process is not running echo current PID into lock file
			write_log "Not running yet, locking"
			echo $$ > "$LCK_FILE"
		else
			write_log "$(basename $0) is already running [$MYPID]"
			exit 0
		fi
	else
		write_log "Not running yet, locking"
		echo $$ > "$LCK_FILE"
	fi
}

# Release lock func
release_lock() {
	if [ $(uname | grep 'MINGW') ]; then
		write_log "Ingnoring lock on MinGW"
		return
	fi
	write_log "Releasing lock"
	rm -f "$LCK_FILE"
}

set_remote_host() {
	[ -z $URL ] && [ -n "$SCOPE" ] && URL="$(git config --get git-ftp.$SCOPE.url)"
	[ -z $URL ] && URL="$(git config --get git-ftp.url)"
	REMOTE_HOST=$(expr "$URL" : ".*://\([a-z0-9\.:-]*\).*")
	[ -z $REMOTE_HOST ] && REMOTE_HOST=$(expr "$URL" : "\([a-z0-9\.:-]*\).*")
	[ -z $REMOTE_HOST ] && print_error_and_die "Remote host not set" $ERROR_MISSING_ARGUMENTS
}

set_remote_protocol() {
	# Split protocol from url
	REMOTE_PROTOCOL=$(echo "$URL" | egrep '^(ftp|sftp|ftps|ftpes)://.*' | cut -d ':' -f 1)

	# Protocol found?
	if [ ! -z $REMOTE_PROTOCOL ]; then
		REMOTE_PATH=$(echo "$URL" | cut -d '/' -f 4-)
		handle_remote_protocol_options
		return 0
	fi

	# Check if a unknown protocol is set, handle it or use default protocol
	UNKNOWN_PROTOCOL=$(expr "$URL" : "\(.*:[/]*\).*")
	if [ -z $UNKNOWN_PROTOCOL ]; then
		write_log "Protocol not set, using default protocol $DEFAULT_PROTOCOL://"
		REMOTE_PROTOCOL=$DEFAULT_PROTOCOL
		[ $(echo "$URL" | egrep "/" | wc -l) -ne 0 ] && REMOTE_PATH=$(echo "$URL" | cut -d '/' -f 2-)
		handle_remote_protocol_options
		return 0
	fi
	print_error_and_die "Protocol unknown '$UNKNOWN_PROTOCOL'" $ERROR_UNKNOWN_PROTOCOL
}

load_deployed_sha1() {
	# Get the last commit (SHA) we deployed if not ignored or not found
	write_log "Retrieving last commit from $REMOTE_PROTOCOL://$REMOTE_HOST/$REMOTE_PATH"
	DEPLOYED_SHA1="$(get_file_content $DEPLOYED_SHA1_FILE)"
	if [ $? -ne 0 ]; then
		print_error_and_die "Could not get last commit. Network down? Wrong URL? Use 'git ftp init' for the inital push." $ERROR_DOWNLOAD
	fi
	write_log "Last deployed SHA1 for $REMOTE_HOST/$REMOTE_PATH is $DEPLOYED_SHA1"
}

check_deployed_sha1() {
	write_log "Check if $REMOTE_PROTOCOL://$REMOTE_HOST/$REMOTE_PATH is clean"
	DEPLOYED_SHA1="$(get_file_content $DEPLOYED_SHA1_FILE)"
	if [ "$DEPLOYED_SHA1" != "" ]; then
		print_error_and_die "Commit found, use 'git ftp push' to sync. Exiting..." $ERROR_USAGE
	fi
	IGNORE_DEPLOYED=1
}

set_changed_files() {
	if [ $IGNORE_DEPLOYED -ne 0 ]; then
		write_log "Sync all files."
		FILES_CHANGED="$(git ls-files -t)"
		return
	fi
	
	# Get the files changed since then
	FILES_CHANGED="$(git diff --name-status $DEPLOYED_SHA1 2>/dev/null | tr '\t' ' ')"
	if [ $? -ne 0 ]; then
		if [ $FORCE -ne 1 ]; then
			print_info "Unknown SHA1 object, make sure you are deploying the right branch and it is up-to-date."
			echo -n "Do you want to ignore and upload all files again? [y/N] "
			read ANSWER_STATE
			if [ "$ANSWER_STATE" != "y" ] && [ "$ANSWER_STATE" != "Y" ]; then
				print_info "Aborting..."
				release_lock
				exit 0
			else
				write_log "Taking all files";
				FILES_CHANGED="$(git ls-files -t)"
			fi
		else
			print_info "Unknown SHA1 object, could not determine changed filed, taking all files"
			FILES_CHANGED="$(git ls-files -t)"
		fi
	elif [ -n "$FILES_CHANGED" ]; then
		write_log "Having changed files";
	else
		print_info "No changed files for $REMOTE_HOST/$REMOTE_PATH. Everything up-to-date."
		release_lock
		exit 0
	fi
}

handle_file_sync() {
	# Calculate total file count
	DONE_ITEMS=0
	TOTAL_ITEMS=$(echo "$FILES_CHANGED" | wc -l)
	TOTAL_ITEMS=$((TOTAL_ITEMS+0)) # trims whitespaces produced by wc
	write_log "There are $TOTAL_ITEMS files to upload"

	# Changing internal field separator, file names could have spaces
	OIFS="$IFS"
	# dash does not like NIFS=$'\n', using WYSIWYG
	NIFS=$'
'
	IFS="$NIFS"
	for FILE_ITERATOR in $FILES_CHANGED; do
		(( DONE_ITEMS += 1 ))
		FILE_MODE=$(echo "$FILE_ITERATOR" | cut -f1 -d ' ')
		FILE_NAME=$(echo "$FILE_ITERATOR" | cut -f2- -d ' ')
		if [ "$FILE_MODE" != "D"  ]; then
			print_info "[$DONE_ITEMS of $TOTAL_ITEMS] Uploading '$FILE_NAME'"
			if [ -d $FILE_NAME ]; then
				write_log "Ignored $FILE_NAME, it is a submodule"
			else
				[ $DRY_RUN -ne 1 ] && upload_file $FILE_NAME
			fi
		else
			# Removing file
			print_info "[$DONE_ITEMS of $TOTAL_ITEMS] Removing '$FILE_NAME'"
			[ $DRY_RUN -ne 1 ] && remove_file $FILE_NAME
		fi
	done
	IFS="$OIFS"
}

handle_remote_protocol_options() {
	# SFTP uses a different remove command and uses absolute paths
	[ "$REMOTE_PROTOCOL" = "sftp" ] && REMOTE_DELETE_CMD="rm /"
	# Options for curl if using FTPES
	[ "$REMOTE_PROTOCOL" = "ftpes" ] && REMOTE_CMD_OPTIONS="$REMOTE_CMD_OPTIONS --ftp-ssl -k"
}

handle_action() {
	case "$ACTION" in
		init)
			action_init
			;;
		push)
			action_push
			;;
		catchup)
			action_catchup	
			;;
		show)
			action_show
			;;
		*)
			print_error_and_die "Action unknown" $ERROR_MISSING_ARGUMENTS
			;;
	esac
}

set_remote_user() {
	[ -z $REMOTE_USER ] && [ -n "$SCOPE" ] && REMOTE_USER="$(git config --get git-ftp.$SCOPE.user)"
	[ -z $REMOTE_USER ] && REMOTE_USER="$(git config --get git-ftp.user)"
}

set_remote_password() {
	[ -z $REMOTE_PASSWD ] && [ $USE_KEYCHAIN -eq 1 ] && get_keychain_password "$KEYCHAIN_USER"
	[ -z $REMOTE_PASSWD ] && [ -n "$SCOPE" ] && REMOTE_PASSWD="$(git config --get git-ftp.$SCOPE.password)"
	[ -z $REMOTE_PASSWD ] && REMOTE_PASSWD="$(git config --get git-ftp.password)"
}

set_remotes() {
	set_remote_host
	write_log "Host is '$REMOTE_HOST'"

	set_remote_user
	write_log "User is '$REMOTE_USER'"
	
	set_remote_password
	if [ -z $REMOTE_PASSWD ]; then
		write_log "No password is set"
	else
		write_log "Password is set"
	fi 

	set_remote_protocol
	# Add trailing slash if missing
	if [ ! -z $REMOTE_PATH ] && [ $(echo "$REMOTE_PATH" | egrep "*/$" | wc -l) -ne 1 ]; then
		write_log "Added missing trailing / in path"
		REMOTE_PATH="$REMOTE_PATH/"
	fi
	write_log "Path is '$REMOTE_PATH'"
}

# ------------------------------------------------------------
# Actions
# ------------------------------------------------------------
action_init() {
	check_git_version
	check_is_git_project
	check_is_dirty_repository
	check_branch
	set_remotes
	lock
	check_deployed_sha1
	set_changed_files
	remote_lock
	handle_file_sync
	upload_local_sha1
	release_remote_lock
	release_lock
}

action_push() {
	check_git_version
	check_is_git_project
	check_is_dirty_repository
	check_branch
	set_remotes
	lock
	load_deployed_sha1
	set_changed_files
	remote_lock
	handle_file_sync
	upload_local_sha1
	release_remote_lock
	release_lock
}

action_catchup() {
	check_is_git_project
	check_is_dirty_repository
	check_branch
	set_remotes
	lock
	upload_local_sha1
	release_lock
}

action_show() {
	set_remotes
	DEPLOYED_SHA1="$(get_file_content $DEPLOYED_SHA1_FILE)"
	check_exit_status "Could not get uploaded log file" $ERROR_DOWNLOAD
	git show "$DEPLOYED_SHA1"
}

# ------------------------------------------------------------
# Checks
# ------------------------------------------------------------
check_git_version() {
	GIT_VERSION=$(git --version | cut -d ' ' -f 3)
	MAJOR=$(echo $GIT_VERSION | cut -d '.' -f 1)
	MINOR=$(echo $GIT_VERSION | cut -d '.' -f 2)
	if [ $MAJOR -lt 2 ] && [ $MINOR -lt 7 ]; then
		print_error_and_die "Git is too old, 1.7.0 or higher suported only" $ERROR_GIT
	fi
}

check_remote_lock() {
	write_log "Checking remote lock"
	LCK_CONTENT="$(get_file_content $REMOTE_LCK_FILE 2>/dev/null)"
	if [ -n "$LCK_CONTENT" ]; then
		LCK_SHA1=$(echo "$LCK_CONTENT" | head -n 1)
		write_log "Remote lock sha1 $LCK_SHA1"
		LOCAL_SHA1="$(git log -n 1 --pretty=format:%H)"
		write_log "Local sha1 $LOCAL_SHA1"
		if [ "$LCK_SHA1" != "$LOCAL_SHA1" ]; then
			lck_user=$(echo "$LCK_CONTENT" | tail -n 1)
			print_error_and_die "Remote locked by ${lck_user}" $ERROR_REMOTE_LOCKED
		fi
	fi
}

check_is_git_project() {
	[ -d ".git" ] || print_error_and_die "Not a Git project? Exiting..." $ERROR_GIT
}

check_is_dirty_repository() {
	CLEAN_REPO=$(git status -uno | egrep "nothing to commit*" | wc -l)
	[ $CLEAN_REPO -ne 1 ] && print_error_and_die "Dirty repository: Having uncommitted changes. Exiting..." $ERROR_GIT
}

check_branch() {
	if [ $FORCE -eq 1 ]; then
		return
	fi

	# Check if are at master branch
	CURRENT_BRANCH="$(git branch | grep '*' | cut -d ' ' -f 2)"
	if [ "$CURRENT_BRANCH" != "master" ]; then
		print_info "You are not on master branch."
		echo -n "Are you sure deploying branch '$CURRENT_BRANCH'? [Y/n] "
		read ANSWER_BRANCH
		if [ "$ANSWER_BRANCH" = "n" ] || [ "$ANSWER_BRANCH" = "N" ]; then
			print_info "Aborting..."
			release_lock
			exit 0
		fi
	fi
}

# ------------------------------------------------------------
# Main
# ------------------------------------------------------------
main() {
	handle_action
	exit 0
}

# 2 args are needed: action and url
if [ $# = 0 ]; then
	usage;
fi

while test $# != 0
do
	case "$1" in
		init|push|catchup|show)
			ACTION="$1"
			;;
		-h|--h|--he|--hel|--help|help)
			usage_long
			;;
		-u|--user*)
			case "$#,$1" in
				*,*=*)
					REMOTE_USER=$(expr "z$1" : 'z-[^=]*=\(.*\)')
					;;
				1,*)
					REMOTE_USER="$USER"
					;;
				*)
					if [ ! $(echo "$2" | egrep '^-' | wc -l) -eq 1 ]; then
						REMOTE_USER="$2"
						shift
					else
						REMOTE_USER="$USER"
					fi
					;;
			esac
			;;
		-s|--scope*)
			case "$#,$1" in
				*,*=*)
					SCOPE=$(expr "z$1" : 'z-[^=]*=\(.*\)')
					;;
				1,*)
					print_error_and_die "Too few arguments for option -s" $ERROR_MISSING_ARGUMENTS
					;;
				*)
					if [ ! $(echo "$2" | egrep '^-' | wc -l) -eq 1 ]; then
						SCOPE="$2"
						shift
					else
						print_error_and_die "Too few arguments for option -s" $ERROR_MISSING_ARGUMENTS
					fi
					;;
			esac
			write_log "Using scope $SCOPE if available"
			;;
		-p|--passwd*)
			case "$#,$1" in
				*,*=*)
					REMOTE_PASSWD=$(expr "z$1" : 'z-[^=]*=\(.*\)')
					;;
				1,*)
					ask_for_passwd
					;;
				*)
					if [ ! $(echo "$2" | egrep '^-' | wc -l) -eq 1 ]; then
						REMOTE_PASSWD="$2"
						shift
					else
						ask_for_passwd
					fi
					;;
			esac
			;;
		-k|--keychain*)
			USE_KEYCHAIN=1
			write_log "Enabled keychain"
			case "$#,$1" in
				*,*=*)
					KEYCHAIN_USER=$(expr "z$1" : 'z-[^=]*=\(.*\)')
					;;
				1,*)
					# Nothing is handed over, this is okay
					;;
				*)
					if [ ! $(echo "$2" | egrep '^-' | wc -l) -eq 1 ]; then
						KEYCHAIN_USER="$2"
						shift
					fi
					;;
			esac
			;;
		-a|--all)
			IGNORE_DEPLOYED=1
			;;
		-l|--lock)
			if [ $ENABLE_REMOTE_LCK -ne 1 ]; then
				write_log "Enabling remote locking feature"
				ENABLE_REMOTE_LCK=1
			else
				write_log "Disabling remote locking feature"
				ENABLE_REMOTE_LCK=0
			fi
			;;
		-D|--dry-run)
			DRY_RUN=1
			write_log "Running dry, won't do anything"
			;;
		-n|--silent)
			VERBOSE=-1
			REMOTE_CMD_OPTIONS="-s"
			;;
		-v|--verbose)
			VERBOSE=1
			[ -n "$LOG_CACHE" ] && echo -e $LOG_CACHE
			REMOTE_CMD_OPTIONS=""
			;;
		-vv)
			VERBOSE=1
			[ -n "$LOG_CACHE" ] && echo -e $LOG_CACHE
			REMOTE_CMD_OPTIONS="-v"
			;;
		-f|--force)
			FORCE=1
			write_log "Forced mode enabled"
			;;
		--version|version)
			echo "git-ftp version $VERSION"
			exit 0
			;;
		-A|--active)
			ACTIVE_MODE=1
			write_log "Using active mode"
			;;
		*)
			# Pass thru anything that may be meant for fetch.
			[ -n "$1" ] && URL=$(echo $1)
			;;
	esac
	shift
done
main
